setResult	vm/vm.html#setResult,VmArgs,BiggestInt	vm: setResult(a: VmArgs; v: BiggestInt)	
setResult	vm/vm.html#setResult,VmArgs,BiggestFloat	vm: setResult(a: VmArgs; v: BiggestFloat)	
setResult	vm/vm.html#setResult,VmArgs,bool	vm: setResult(a: VmArgs; v: bool)	
setResult	vm/vm.html#setResult,VmArgs,string	vm: setResult(a: VmArgs; v: string)	
setResult	vm/vm.html#setResult,VmArgs,PNode	vm: setResult(a: VmArgs; n: PNode)	
setResult	vm/vm.html#setResult,VmArgs,AbsoluteDir	vm: setResult(a: VmArgs; v: AbsoluteDir)	
setResult	vm/vm.html#setResult,VmArgs,seq[string]	vm: setResult(a: VmArgs; v: seq[string])	
numArgs	vm/vm.html#numArgs,VmArgs	vm: numArgs(a: VmArgs): int	
getInt	vm/vm.html#getInt,VmArgs,Natural	vm: getInt(a: VmArgs; i: Natural): BiggestInt	
getBool	vm/vm.html#getBool,VmArgs,Natural	vm: getBool(a: VmArgs; i: Natural): bool	
getFloat	vm/vm.html#getFloat,VmArgs,Natural	vm: getFloat(a: VmArgs; i: Natural): BiggestFloat	
getNode	vm/vm.html#getNode,VmArgs,Natural	vm: getNode(a: VmArgs; i: Natural): PNode	
getString	vm/vm.html#getString,VmArgs,Natural	vm: getString(a: VmArgs; i: Natural): string	
getVar	vm/vm.html#getVar,VmArgs,Natural	vm: getVar(a: VmArgs; i: Natural): PNode	
getNodeAddr	vm/vm.html#getNodeAddr,VmArgs,Natural	vm: getNodeAddr(a: VmArgs; i: Natural): PNode	
execProc	vm/vm.html#execProc,TCtx,PSym,openArray[PNode]	vm: execProc(c: var TCtx; sym: PSym; args: openArray[PNode]): PNode	
evalExpr	vm/vm.html#evalExpr,TCtx,PNode	vm: evalExpr(c: var TCtx; n: PNode): PNode	
getGlobalValue	vm/vm.html#getGlobalValue,TCtx,PSym	vm: getGlobalValue(c: TCtx; s: PSym): PNode	
setGlobalValue	vm/vm.html#setGlobalValue,TCtx,PSym,PNode	vm: setGlobalValue(c: var TCtx; s: PSym; val: PNode)	
registerAdditionalOps	vm/vm.html#registerAdditionalOps,PCtx	vm: registerAdditionalOps(c: PCtx)	
setupGlobalCtx	vm/vm.html#setupGlobalCtx,PSym,ModuleGraph,IdGenerator	vm: setupGlobalCtx(module: PSym; graph: ModuleGraph; idgen: IdGenerator)	
evalPass	vm/vm.html#evalPass	vm: evalPass	
evalConstExpr	vm/vm.html#evalConstExpr,PSym,IdGenerator,ModuleGraph,PNode	vm: evalConstExpr(module: PSym; idgen: IdGenerator; g: ModuleGraph; e: PNode): PNode	
evalStaticExpr	vm/vm.html#evalStaticExpr,PSym,IdGenerator,ModuleGraph,PNode,PSym	vm: evalStaticExpr(module: PSym; idgen: IdGenerator; g: ModuleGraph; e: PNode;\n               prc: PSym): PNode	
evalStaticStmt	vm/vm.html#evalStaticStmt,PSym,IdGenerator,ModuleGraph,PNode,PSym	vm: evalStaticStmt(module: PSym; idgen: IdGenerator; g: ModuleGraph; e: PNode;\n               prc: PSym)	
setupCompileTimeVar	vm/vm.html#setupCompileTimeVar,PSym,IdGenerator,ModuleGraph,PNode	vm: setupCompileTimeVar(module: PSym; idgen: IdGenerator; g: ModuleGraph; n: PNode)	
genericParamsInMacroCall	vm/vm.html#genericParamsInMacroCall.i,PSym,PNode	vm: genericParamsInMacroCall(macroSym: PSym; call: PNode): (PSym, PNode)	
evalMacroCall	vm/vm.html#evalMacroCall,PSym,IdGenerator,ModuleGraph,ref.int,PNode,PSym	vm: evalMacroCall(module: PSym; idgen: IdGenerator; g: ModuleGraph;\n              templInstCounter: ref int; n: PNode; sym: PSym): PNode	
